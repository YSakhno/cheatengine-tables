<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Control the last-shot Bird"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>/*
 * Game Title:     Angry Birds Space
 * Game Version:   2.1.0 (Steam)
 * Proces Name:    AngryBirdsSpace.exe
 * Script Version: 1.0
 * CE Version:     6.4
 * Author:         Yuri Sakhno (George1)
 * Release date:   24-Jan-2015
 *
 * History:
 *   24-Jan-15: Initial release; Bird movement
 *
 * Features:
 *   + Bird movement
 */

[ENABLE]

// The Remember Bird Ptr AOB-scan targets the following code:
// 55                    push ebp
// 8B EC                 mov ebp, esp
// 83 EC 08              sub esp, 8
// 83 39 02              cmp dword ptr [ecx], 2
// 0F ?? ?? ?? 00 00     jXX +0000????
aobscanmodule(rememberBirdPtr, AngryBirdsSpace.exe, 55 8B EC 83 EC 08 83 39 02 0F ?? ?? ?? 00 00);
registersymbol(_rememberBirdPtr);
label(_rememberBirdPtr);

// The Main Update Loop AOB-scan targets the following code:
// 83 39 02              cmp dword ptr [ecx], 2
// D9 41 38              fld dword ptr [ecx+38]
// 8B 41 2C              mov eax, [ecx+2C]
aobscanmodule(mainUpdateLoop, AngryBirdsSpace.exe, 83 39 02 D9 41 38 8B 41 2C);
registersymbol(mainUpdateLoop);

alloc(newmem, 1024);

label(rememberBirdPtrHook);
label(rememberBirdPtrOriginalCode);
label(rememberBirdPtrReturn);
label(mainUpdateLoopHook);
label(mainUpdateLoopOriginalCode);
label(mainUpdateLoopReturn);

label(doRememberBirdPtr);
label(pollKeyboardState);
label(doMoveLeft);
label(doMoveLeftAction);
label(doMoveRight);
label(doMoveRightAction);
label(doMoveUp);
label(doMoveDown);

label(pBird);
registersymbol(pBird);
label(dwKeyLeft);
registersymbol(dwKeyLeft);
label(dwKeyRight);
registersymbol(dwKeyRight);
label(dwKeyUp);
registersymbol(dwKeyUp);
label(dwKeyDown);
registersymbol(dwKeyDown);
label(dwKeyRememberBird);
registersymbol(dwKeyRememberBird);
label(fSpeedMoveLeft);
registersymbol(fSpeedMoveLeft);
label(fSpeedMoveRight);
registersymbol(fSpeedMoveRight);
label(fSpeedMoveUp);
registersymbol(fSpeedMoveUp);
label(fSpeedMoveDown);
registersymbol(fSpeedMoveDown);
label(bAlwaysRememberBird);
registersymbol(bAlwaysRememberBird);
label(bInMirrorWorld);
registersymbol(bInMirrorWorld);
label(bToggleMirrorWorld);
registersymbol(bToggleMirrorWorld);
label(bPressedLeft);
label(bPressedRight);
label(bPressedUp);
label(bPressedDown);

newmem:

/*
 * ================================  Variables  ================================
 */

// Address of the bird that needs to be manipulated
pBird:
    dd 0
// Virtual key code of the key to use to move the bird left
dwKeyLeft:
    dd 2E // Delete key (VK_DELETE)
// Virtual key code of the key to use to move the bird right
dwKeyRight:
    dd 22 // Page Down key (VK_NEXT)
// Virtual key code of the key to use to move the bird up
dwKeyUp:
    dd 24 // Home key (VK_HOME)
// Virtual key code of the key to use to move the bird down
dwKeyDown:
    dd 23 // End key (VK_END)
// Virtual key code of the key to use to remember the bird to control
dwKeyRememberBird:
    dd 20 // Space key (VK_SPACE)
// The speed at which the bird is moved to the left each iteration
fSpeedMoveLeft:
    dd (float)1.0
// The speed at which the bird is moved to the right each iteration
fSpeedMoveRight:
    dd (float)1.0
// The speed at which the bird is moved up each iteration
fSpeedMoveUp:
    dd (float)1.0
// The speed at which the bird is moved down each iteration
fSpeedMoveDown:
    dd (float)1.0
// Whether the bird should always be rememebered (without the need to press a key)
bAlwaysRememberBird:
    dd 0
// Determines whether left and right controls should be switched (1 - yes)
bInMirrorWorld:
    dd 0
// Whether bInMirrorWorld should be toggled from 0 to 1 and vice versa
bToggleMirrorWorld:
    dd 0
// Determines whether 'move left' key is now pressed
bPressedLeft:
    db 0
// Determines whether 'move right' key is now pressed
bPressedRight:
    db 0
// Determines whether 'move up' key is now pressed
bPressedUp:
    db 0
// Determines whether 'move down' key is now pressed
bPressedDown:
    db 0


/*
 * ============================  Actual hooks code =============================
 */

//// Hook for the routine called when the bird is being pulled in slingshot ////
rememberBirdPtrHook:
    // Skip keyboard polling if bAlwaysRememberBird is not zero
    cmp [bAlwaysRememberBird], 0
    jnz doRememberBirdPtr

    // Save EAX, ECX and EDX since Win32 API may modify them
    push eax
    push ecx
    push edx

    // Get state (pressed or not) of the 'remember bird' key
    mov eax, [dwKeyRememberBird]
    push eax
    call GetAsyncKeyState
    test ah, 80 // Test whether the 'remember bird' key is pressed

    // Restore EDX, ECX and EAX back
    pop edx
    pop ecx
    pop eax
    jz rememberBirdPtrOriginalCode // Skip next instruction if the key isn't being pressed

doRememberBirdPtr:
    mov [pBird], ecx // Store pointer to the bird

rememberBirdPtrOriginalCode:
    // Do original code now and return
    mov ebp, esp
    sub esp, 8
    jmp rememberBirdPtrReturn

//// Hook for the main update loop /////////////////////////////////////////////
mainUpdateLoopHook:
    cmp ecx, [pBird] // Check if the correct bird is being manipulated
    jne mainUpdateLoopOriginalCode // If not, skip to original code

    // Check to see if request to toggle bInMirrorWorld has been issued
    cmp [bToggleMirrorWorld], 0
    jz pollKeyboardState // If such request wasn't issued, on to keyboard polling
    xor [bInMirrorWorld], 1 // Toggle the least significant bit of the flag
    and [bToggleMirrorWorld], 0 // Reset the request variable back to zero
    and [bInMirrorWorld], 1 // Reset all other bits of the flag to 0

pollKeyboardState:
    // Save EAX, ECX and EDX since Win32 API may modify them
    push eax
    push ecx
    push edx

    // Get state (pressed or not) of the 'move left' key
    mov eax, [dwKeyLeft]
    push eax
    call GetAsyncKeyState
    mov [bPressedLeft], ah

    // Get state of the 'move right' key
    mov eax, [dwKeyRight]
    push eax
    call GetAsyncKeyState
    mov [bPressedRight], ah

    // Get state of the 'move up' key
    mov eax, [dwKeyUp]
    push eax
    call GetAsyncKeyState
    mov [bPressedUp], ah

    // Get state of the 'move down' key
    mov eax, [dwKeyDown]
    push eax
    call GetAsyncKeyState
    mov [bPressedDown], ah

    // Restore EDX, ECX and EAX back
    pop edx
    pop ecx
    pop eax

doMoveLeft: // This section processes 'move left' key press
    test byte ptr [bPressedLeft], 80
    jz doMoveRight
    fld dword ptr [ecx+2C] // memory at offset 2C contains X-coord of the bird
    fld dword ptr [fSpeedMoveLeft]
    cmp [bInMirrorWorld], 0
    jz doMoveLeftAction
    fchs // to move left in Mirror World, speed should be added, not subtracted
doMoveLeftAction:
    fsubp // st(1) &lt;== st(1)-st(0); pop st
//    fsub dword ptr [fSpeedMoveLeft] // to move left, speed should be subtracted
    fstp dword ptr [ecx+2C]

doMoveRight: // This section processes 'move right' key press
    test byte ptr [bPressedRight], 80
    jz doMoveUp
    fld dword ptr [ecx+2C]
    fld dword ptr [fSpeedMoveRight]
    cmp [bInMirrorWorld], 0
    jz doMoveRightAction
    fchs // to move right in Mirror World, speed should be subtracted, not added
//    fadd dword ptr [fSpeedMoveRight] // to move right, speed should be added
doMoveRightAction:
    faddp // st(1) &lt;== st(0)+st(1); pop st
    fstp dword ptr [ecx+2C]


doMoveUp: // This section processes 'move up' key press
    test byte ptr [bPressedUp], 80
    jz doMoveDown
    fld dword ptr [ecx+30] // memory at offset 30 contains Y-coord of the bird
    fsub dword ptr [fSpeedMoveUp] // to move up, speed should be subtracted
    fstp dword ptr [ecx+30]

doMoveDown: // This section processes 'move down' key press
    test byte ptr [bPressedDown], 80
    jz mainUpdateLoopOriginalCode
    fld dword ptr [ecx+30]
    fadd dword ptr [fSpeedMoveDown] // to move down, speed should be added
    fstp dword ptr [ecx+30]

mainUpdateLoopOriginalCode:
    // Do original code
    cmp dword ptr [ecx], 2
    fld dword ptr [ecx+38]
    jmp mainUpdateLoopReturn


/*
 * =================================  Patches  =================================
 */

rememberBirdPtr+1:
_rememberBirdPtr:
    jmp rememberBirdPtrHook
rememberBirdPtrReturn:

mainUpdateLoop:
    jmp mainUpdateLoopHook
    nop
mainUpdateLoopReturn:

[DISABLE]
dealloc(newmem);

_rememberBirdPtr:
    mov ebp, esp
    sub esp, 8
//  db 8B EC 83 EC 08

mainUpdateLoop:
    cmp dword ptr [ecx], 2
    fld dword ptr [ecx+38]
//  db 83 39 02 D9 41 38

unregistersymbol(bToggleMirrorWorld);
unregistersymbol(bInMirrorWorld);
unregistersymbol(bAlwaysRememberBird);
unregistersymbol(fSpeedMoveDown);
unregistersymbol(fSpeedMoveUp);
unregistersymbol(fSpeedMoveRight);
unregistersymbol(fSpeedMoveLeft);
unregistersymbol(dwKeyRememberBird);
unregistersymbol(dwKeyDown);
unregistersymbol(dwKeyUp);
unregistersymbol(dwKeyRight);
unregistersymbol(dwKeyLeft);
unregistersymbol(pBird);
unregisterSymbol(mainUpdateLoop);
unregistersymbol(_rememberBirdPtr);

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Always remember bird to control (without the need to press a key)"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Key press neeeded
1:Always remember
</DropDownList>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bAlwaysRememberBird</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Is playing Mirror World?"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bInMirrorWorld</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>221</Key>
              </Keys>
              <Value>0</Value>
              <Description>Tell the script the player is in Normal World</Description>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>219</Key>
              </Keys>
              <Value>1</Value>
              <Description>Tell the script the player is in Mirror World</Description>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Key Assignments"</Description>
          <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2</ID>
              <Description>"Move Left Virtual Key Code"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>dwKeyLeft</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>3</ID>
              <Description>"Move Right Virtual Key Code"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>dwKeyRight</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"Move Up Virtual Key Code"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>dwKeyUp</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>6</ID>
              <Description>"Move Down Virtual Key Code"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>dwKeyDown</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>14</ID>
              <Description>"Remember Bird Virtual Key Code"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>dwKeyRememberBird</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Movement Speeds"</Description>
          <Options moRecursiveSetValue="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8</ID>
              <Description>"Move Left Speed"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>fSpeedMoveLeft</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"Move Right Speed"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>fSpeedMoveRight</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>10</ID>
              <Description>"Move Up Speed"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>fSpeedMoveUp</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>11</ID>
              <Description>"Move Down Speed"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>fSpeedMoveDown</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Toggle Normal/Mirror World"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>C0C0C0</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bToggleMirrorWorld</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>8</Key>
              </Keys>
              <Value>1</Value>
              <Description>Toggles the Mirror World flag</Description>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Bird pull (in slingshot)</Description>
      <Address>01032736</Address>
      <ModuleName>AngryBirdsSpace.exe</ModuleName>
      <ModuleNameOffset>12736</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>EC</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>39</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>84</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Main update loop</Description>
      <Address>011C005F</Address>
      <ModuleName>AngryBirdsSpace.exe</ModuleName>
      <ModuleNameOffset>1A005F</ModuleNameOffset>
      <Before>
        <Byte>46</Byte>
        <Byte>08</Byte>
        <Byte>8B</Byte>
        <Byte>0C</Byte>
        <Byte>B8</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>39</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>38</Byte>
        <Byte>8B</Byte>
        <Byte>41</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <Comments>==========================================
 Game Title:      Angry Birds Space
 Game Version:    2.1.0 (Steam)
 Process Name:    AngryBirdsSpace.exe
 Script Version:  1.0
 CE Version:      6.4
 Author:          Yuri Sakhno (George1)
 Release Date:    24-Jan-2015
 
 Features:
   + Allows to control the last-shot bird with keyboard
 
 History:
   24-Jan-15:  Initial release; Bird movement
==========================================
 How to use:
   Activate the script by clicking on an empty box next to the function
   in Cheat Engine's list. Then change values of the options you desire
   to activate.
   Note: If the top-level function does not expand when you click in
   the empty box, it means that your game is not compatible with this
   version of the table.
==========================================
 Hot Keys:
   Backspace  - Toggle the world (Mirror or Normal)
   ]          - to the Normal world!
   [          - to the Mirror world!
 Note: The world-switching hot keys do not switch the actual world in game;
   it is rather an indication to the cheat-script how to interpret left-right
   movement keys when you are controlling the bird with keyboard.
==========================================
</Comments>
</CheatTable>
